@page "/repl/{demoId:int}"
@page "/repl/"

@layout MainLayout

@using BlazorRepl.Client.Services

@inject ComponentCompilationService CompilationService
@inject IJSRuntime JsRuntime

<nav class="navbar repl-navbar">
    <div class="container-fluid">
        <div class="navbar-header" style="color: #303133">
            <a href="/" class="navbar-brand">Blazor REPL</a>
            <button href="/" class="btn btn-link nav-action" @onclick="@Compile" disabled="@Loading">
                <i class="icon-play4"></i> RUN
            </button>
        </div>
    </div>
</nav>

<div class="row flex" style="margin: 0">
    <ReplLoader Show="@Loading" Message="@LoaderText"></ReplLoader>

    <div id="user-code-editor-container">
        <CodeEditor @ref="@CodeEditor" DefaultCode="@DemoCode"></CodeEditor>
    </div>
    <div id="user-page-window-container">
        <iframe id="user-page-window" src="/user-page" style="width: 100%; height: 100%"></iframe>
    </div>
</div>

<ErrorList @bind-Show="AreDiagnosticsShown"
           Diagnostics="Diagnostics"
           UserComponentCodeStartLine="UserComponentCodeStartLine"></ErrorList>

@code {
    private const string BasicUserComponentCodePrefix =
@"@page ""/user-page""
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
";

    [Parameter]
    public int? DemoId { get; set; }

    public string DemoCode { get; set; }

    public CodeEditor CodeEditor { get; set; }

    public string Preset { get; set; } = "basic";

    public string UserComponentCodePrefix => BasicUserComponentCodePrefix;

    public IReadOnlyCollection<CompilationDiagnostic> Diagnostics { get; set; } = Array.Empty<CompilationDiagnostic>();

    public bool AreDiagnosticsShown { get; set; }

    public string LoaderText { get; set; }

    public bool Loading { get; set; }

    public int UserComponentCodeStartLine => UserComponentCodePrefix.Count(ch => ch == '\n');

    public async Task UpdateLoaderText(string loaderText)
    {
        LoaderText = loaderText;
        StateHasChanged();
        await Task.Delay(10); // Ensure rendering has time to be called
    }

    public async Task Compile()
    {
        Loading = true;
        LoaderText = "Processing";
        await Task.Delay(10); // Ensure rendering has time to be called

        var code = await CodeEditor.GetCode();

        var result = await CompilationService.CompileToAssembly("UserPage.razor", UserComponentCodePrefix + code, Preset, UpdateLoaderText);

        Diagnostics = result.Diagnostics.OrderByDescending(x => x.Severity).ThenBy(x => x.Code).ToList();
        AreDiagnosticsShown = true;

        Loading = false;

        if (result.AssemblyBytes != null && result.AssemblyBytes.Length > 0)
        {
            await JsRuntime.InvokeVoidAsync("window.App.readFile", result.AssemblyBytes);

            // TODO: Add error page in iframe
            await JsRuntime.InvokeVoidAsync("window.App.reloadIFrame", "user-page-window");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("window.App.initRepl", "user-code-editor-container", "user-page-window-container", "user-code-editor");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnInitializedAsync()
    {
        if (DemoId.HasValue && DemoCodeProvider.DemoCodeMapping.ContainsKey(DemoId.Value))
        {
            DemoCode = DemoCodeProvider.DemoCodeMapping[DemoId.Value];
        }

        return base.OnInitializedAsync();
    }
}
