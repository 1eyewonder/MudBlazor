@page "/"
@layout MainLayout

@using BlazorFiddlePoC.Shared;
@using Microsoft.CodeAnalysis;

@inject ComponentCompilationService CompilationService
@inject IJSRuntime JsRuntime

<h1 class="text-center" style="padding-bottom: 20px;">Repl for your Blazor component</h1>

<button @onclick="@Compile">Compile</button>
<div class="row" style="height: 100%">
    <div class="col-md-6">
        <div id="user-code-editor" style="width:800px;height:600px;border:1px solid grey"></div>
    </div>

    <div class="col-md-6">
        <iframe id="user-page-window" src="/user-page" style="width: 100%; height: 100%;"></iframe>
    </div>
</div>

<div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
        <strong class="mr-auto">Output</strong>
        <small>@ErrorsCount errors / @WarningsCount warnings</small>
        <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Switch Visibility" @onclick="@ToggleDiagnostics">
            @if (AreDiagnosticsShown)
            {
                <span class="oi oi-chevron-bottom"></span>
            }
            else
            {
                <span class="oi oi-chevron-top"></span>
            }
        </button>
    </div>
    @if (AreDiagnosticsShown && Diagnostics.Any())
    {
        <div class="toast-body">
            <table class="table table-borderless">
                <thead>
                    <tr>
                        <th scope="col">Severity</th>
                        <th scope="col">Code</th>
                        <th scope="col">Description</th>
                        @*<th scope="col">File</th>*@
                        <th scope="col">Line</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var diagnostic in Diagnostics)
                    {
                        <tr>
                            <th>@diagnostic.Severity</th>
                            <td>@diagnostic.Descriptor?.Id</td>
                            <td>@diagnostic.GetMessage()</td>
                            @*<td>@diagnostic.Descriptor</td>*@
                            <td>@diagnostic.Location?.GetLineSpan().Span.Start.Line</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    public IEnumerable<Diagnostic> Diagnostics { get; set; } = new List<Diagnostic>();
    public bool AreDiagnosticsShown { get; set; }
    public int ErrorsCount { get; set; }
    public int WarningsCount { get; set; }

    public void ToggleDiagnostics() => AreDiagnosticsShown = !AreDiagnosticsShown;

    public async Task Compile()
    {
        var code = await JsRuntime.InvokeAsync<string>("window.editor.getValue");

        var sw = System.Diagnostics.Stopwatch.StartNew();
        var result = CompilationService.CompileToAssembly("UserPage.razor", $@"
@page ""/user-page""

@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Linq;

{code}");

        Diagnostics = result.Diagnostics;
        AreDiagnosticsShown = true;

        ErrorsCount = Diagnostics.Count(d => d.Severity == DiagnosticSeverity.Error);
        WarningsCount = Diagnostics.Count(d => d.Severity == DiagnosticSeverity.Warning);

        sw.Restart();
        if (result.AssemblyBytes != null && result.AssemblyBytes.Length > 0)
        {
            await JsRuntime.InvokeVoidAsync("window.readFile", result.AssemblyBytes);

            // Add error page in IFrame
            await JsRuntime.InvokeVoidAsync("window.reloadIFrame", "user-page-window");
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("window.initEditor", "user-code-editor");
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
